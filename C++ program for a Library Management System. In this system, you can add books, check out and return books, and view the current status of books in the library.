#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <iomanip>

struct Book {
    std::string title;
    std::string author;
    bool available;
};

class LibraryManagementSystem {
private:
    std::vector<Book> books;

public:
    void addBook(const std::string& title, const std::string& author) {
        Book newBook{title, author, true};
        books.push_back(newBook);
        std::cout << "Book added to the library." << std::endl;
    }

    void checkOutBook(int bookIndex) {
        if (bookIndex >= 0 && bookIndex < books.size()) {
            if (books[bookIndex].available) {
                books[bookIndex].available = false;
                std::cout << "Book checked out successfully." << std::endl;
            } else {
                std::cout << "Book is not available for checkout." << std::endl;
            }
        } else {
            std::cout << "Invalid book index." << std::endl;
        }
    }

    void returnBook(int bookIndex) {
        if (bookIndex >= 0 && bookIndex < books.size()) {
            if (!books[bookIndex].available) {
                books[bookIndex].available = true;
                std::cout << "Book returned successfully." << std::endl;
            } else {
                std::cout << "Book is already available in the library." << std::endl;
            }
        } else {
            std::cout << "Invalid book index." << std::endl;
        }
    }

    void viewLibraryStatus() const {
        std::cout << "Library Status:" << std::endl;
        if (books.empty()) {
            std::cout << "No books in the library." << std::endl;
        } else {
            std::cout << std::setw(4) << "ID" << std::setw(25) << "Title" << std::setw(20) << "Author" << std::setw(12) << "Status"
                      << std::endl;
            std::cout << std::string(61, '-') << std::endl;

            for (size_t i = 0; i < books.size(); ++i) {
                std::cout << "[" << (books[i].available ? "Available" : "Checked Out") << "] " << i + 1 << ". " << std::setw(25)
                          << books[i].title << std::setw(20) << books[i].author << std::endl;
            }
        }
    }
};

int main() {
    LibraryManagementSystem librarySystem;
    char choice;

    do {
        std::cout << "Library Management System" << std::endl;
        std::cout << "1. Add Book" << std::endl;
        std::cout << "2. Check Out Book" << std::endl;
        std::cout << "3. Return Book" << std::endl;
        std::cout << "4. View Library Status" << std::endl;
        std::cout << "5. Quit" << std::endl;
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case '1': {
                std::cin.ignore();
                std::string title, author;

                std::cout << "Enter book title: ";
                std::getline(std::cin, title);

                std::cout << "Enter book author: ";
                std::getline(std::cin, author);

                librarySystem.addBook(title, author);
                break;
            }
            case '2': {
                int bookIndex;
                std::cout << "Enter book index to check out: ";
                std::cin >> bookIndex;

                librarySystem.checkOutBook(bookIndex - 1); // Subtract 1 to convert to zero-based indexing
                break;
            }
            case '3': {
                int bookIndex;
                std::cout << "Enter book index to return: ";
                std::cin >> bookIndex;

                librarySystem.returnBook(bookIndex - 1); // Subtract 1 to convert to zero-based indexing
                break;
            }
            case '4':
                librarySystem.viewLibraryStatus();
                break;
            case '5':
                std::cout << "Exiting the program." << std::endl;
                break;
            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
        }
    } while (choice != '5');

    return 0;
}
