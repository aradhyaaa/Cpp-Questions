#include <iostream>
#include <vector>
#include <string>

struct Task {
    std::string description;
    bool completed;
};

int main() {
    std::vector<Task> tasks;
    char choice;

    do {
        std::cout << "Task Management System" << std::endl;
        std::cout << "1. Add Task" << std::endl;
        std.cout << "2. View Tasks" << std::endl;
        std::cout << "3. Mark Task as Completed" << std::endl;
        std::cout << "4. Remove Task" << std::endl;
        std::cout << "5. Quit" << std::endl;
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case '1': {
                Task task;
                std::cout << "Enter the task description: ";
                std::cin.ignore();
                std::getline(std::cin, task.description);
                task.completed = false;
                tasks.push_back(task);
                std::cout << "Task added." << std::endl;
                break;
            }
            case '2': {
                std::cout << "Tasks:" << std::endl;
                for (size_t i = 0; i < tasks.size(); ++i) {
                    std::cout << (i + 1) << ". ";
                    if (tasks[i].completed) {
                        std::cout << "[Completed] ";
                    }
                    std::cout << tasks[i].description << std::endl;
                }
                break;
            }
            case '3': {
                size_t taskNumber;
                std::cout << "Enter the number of the task to mark as completed: ";
                std::cin >> taskNumber;
                if (taskNumber >= 1 && taskNumber <= tasks.size()) {
                    tasks[taskNumber - 1].completed = true;
                    std::cout << "Task marked as completed." << std::endl;
                } else {
                    std::cout << "Invalid task number." << std::endl;
                }
                break;
            }
            case '4': {
                size_t taskNumber;
                std::cout << "Enter the number of the task to remove: ";
                std::cin >> taskNumber;
                if (taskNumber >= 1 && taskNumber <= tasks.size()) {
                    tasks.erase(tasks.begin() + taskNumber - 1);
                    std::cout << "Task removed." << std::endl;
                } else {
                    std::cout << "Invalid task number." << std::endl;
                }
                break;
            }
            case '5':
                std::cout << "Exiting the program." << std::endl;
                break;
            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
        }
    } while (choice != '5');

    return 0;
}
