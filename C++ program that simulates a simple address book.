#include <iostream>
#include <vector>
#include <string>

struct Contact {
    std::string name;
    std::string phoneNumber;
};

int main() {
    std::vector<Contact> addressBook;
    char choice;

    do {
        std::cout << "Address Book" << std::endl;
        std::cout << "1. Add Contact" << std::endl;
        std::cout << "2. View Contacts" << std::endl;
        std::cout << "3. Search by Name" << std::endl;
        std::cout << "4. Remove Contact" << std::endl;
        std::cout << "5. Quit" << std::endl;
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case '1': {
                Contact contact;
                std::cout << "Enter the contact's name: ";
                std::cin.ignore();
                std::getline(std::cin, contact.name);
                std::cout << "Enter the contact's phone number: ";
                std::cin >> contact.phoneNumber;
                addressBook.push_back(contact);
                std::cout << "Contact added to the address book." << std::endl;
                break;
            }
            case '2': {
                std::cout << "Address Book:" << std::endl;
                for (const Contact& contact : addressBook) {
                    std::cout << "Name: " << contact.name << ", Phone Number: " << contact.phoneNumber << std::endl;
                }
                break;
            }
            case '3': {
                std::string searchName;
                std::cout << "Enter the name to search: ";
                std::cin.ignore();
                std::getline(std::cin, searchName);
                bool found = false;
                std::cout << "Matching Contacts by Name:" << std::endl;
                for (const Contact& contact : addressBook) {
                    if (contact.name.find(searchName) != std::string::npos) {
                        std::cout << "Name: " << contact.name << ", Phone Number: " << contact.phoneNumber << std::endl;
                        found = true;
                    }
                }
                if (!found) {
                    std::cout << "No matching contacts found by name." << std::endl;
                }
                break;
            }
            case '4': {
                std::string removeName;
                std::cout << "Enter the name of the contact to remove: ";
                std::cin.ignore();
                std::getline(std::cin, removeName);
                bool found = false;
                for (auto it = addressBook.begin(); it != addressBook.end(); ++it) {
                    if (it->name == removeName) {
                        addressBook.erase(it);
                        std::cout << "Contact removed from the address book." << std::endl;
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    std::cout << "Contact not found in the address book." << std::endl;
                }
                break;
            }
            case '5':
                std::cout << "Exiting the program." << std::endl;
                break;
            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
        }
    } while (choice != '5');

    return 0;
}
