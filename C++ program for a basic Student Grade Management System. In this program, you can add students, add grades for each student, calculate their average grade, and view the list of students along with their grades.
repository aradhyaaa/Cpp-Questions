#include <iostream>
#include <vector>
#include <string>
#include <iomanip>

struct Student {
    std::string name;
    std::vector<double> grades;

    Student(const std::string& _name) : name(_name) {}

    double calculateAverageGrade() const {
        if (grades.empty()) {
            return 0.0;
        }

        double sum = 0.0;
        for (double grade : grades) {
            sum += grade;
        }
        return sum / grades.size();
    }
};

class GradeManagementSystem {
private:
    std::vector<Student> students;

public:
    void addStudent(const std::string& name) {
        Student newStudent(name);
        students.push_back(newStudent);
        std::cout << "Student added to the system." << std::endl;
    }

    void addGrade(int studentIndex, double grade) {
        if (studentIndex >= 0 && studentIndex < students.size()) {
            students[studentIndex].grades.push_back(grade);
            std::cout << "Grade added for the student." << std::endl;
        } else {
            std::cout << "Invalid student index." << std::endl;
        }
    }

    void viewStudentList() const {
        std::cout << "Student List:" << std::endl;
        if (students.empty()) {
            std::cout << "No students in the system." << std::endl;
        } else {
            std::cout << std::setw(20) << "Name" << std::setw(15) << "Average Grade" << std::endl;
            std::cout << std::string(35, '-') << std::endl;

            for (const Student& student : students) {
                double averageGrade = student.calculateAverageGrade();
                std::cout << std::setw(20) << student.name << std::setw(15) << std::fixed << std::setprecision(2) << averageGrade << std::endl;
            }
        }
    }
};

int main() {
    GradeManagementSystem gradeSystem;
    char choice;

    do {
        std::cout << "Grade Management System" << std::endl;
        std::cout << "1. Add Student" << std::endl;
        std::cout << "2. Add Grade" << std::endl;
        std::cout << "3. View Student List" << std::endl;
        std::cout << "4. Quit" << std::endl;
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case '1': {
                std::cin.ignore();
                std::string name;

                std::cout << "Enter student name: ";
                std::getline(std::cin, name);

                gradeSystem.addStudent(name);
                break;
            }
            case '2': {
                int studentIndex;
                double grade;

                std::cout << "Enter student index to add grade: ";
                std::cin >> studentIndex;

                std::cout << "Enter grade: ";
                std::cin >> grade;

                gradeSystem.addGrade(studentIndex - 1, grade); // Subtract 1 to convert to zero-based indexing
                break;
            }
            case '3':
                gradeSystem.viewStudentList();
                break;
            case '4':
                std::cout << "Exiting the program." << std::endl;
                break;
            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
        }
    } while (choice != '4');

    return 0;
}
