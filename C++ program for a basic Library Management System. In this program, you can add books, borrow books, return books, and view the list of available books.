#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <iomanip>

struct Book {
    std::string title;
    std::string author;
    bool available;

    Book(const std::string& _title, const std::string& _author) : title(_title), author(_author), available(true) {}
};

class LibraryManagementSystem {
private:
    std::vector<Book> books;

public:
    void addBook(const std::string& title, const std::string& author) {
        Book newBook(title, author);
        books.push_back(newBook);
        std::cout << "Book added to the library." << std::endl;
    }

    void borrowBook(int bookIndex) {
        if (bookIndex >= 0 && bookIndex < books.size()) {
            if (books[bookIndex].available) {
                books[bookIndex].available = false;
                std::cout << "Book borrowed successfully." << std::endl;
            } else {
                std::cout << "Book is already borrowed." << std::endl;
            }
        } else {
            std::cout << "Invalid book index." << std::endl;
        }
    }

    void returnBook(int bookIndex) {
        if (bookIndex >= 0 && bookIndex < books.size()) {
            if (!books[bookIndex].available) {
                books[bookIndex].available = true;
                std::cout << "Book returned successfully." << std::endl;
            } else {
                std::cout << "Book is already available." << std::endl;
            }
        } else {
            std::cout << "Invalid book index." << std::endl;
        }
    }

    void viewAvailableBooks() const {
        std::cout << "Available Books:" << std::endl;
        if (books.empty()) {
            std::cout << "No books in the library." << std::endl;
        } else {
            std::cout << std::setw(4) << "ID" << std::setw(30) << "Title" << std::setw(30) << "Author" << std::endl;
            std::cout << std::string(64, '-') << std::endl;

            int count = 0;
            for (size_t i = 0; i < books.size(); ++i) {
                if (books[i].available) {
                    ++count;
                    std::cout << std::setw(4) << count << std::setw(30) << books[i].title << std::setw(30) << books[i].author << std::endl;
                }
            }
        }
    }
};

int main() {
    LibraryManagementSystem librarySystem;
    char choice;

    do {
        std::cout << "Library Management System" << std::endl;
        std::cout << "1. Add Book" << std::endl;
        std::cout << "2. Borrow Book" << std::endl;
        std::cout << "3. Return Book" << std::endl;
        std::cout << "4. View Available Books" << std::endl;
        std::cout << "5. Quit" << std::endl;
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case '1': {
                std::cin.ignore();
                std::string title, author;

                std::cout << "Enter book title: ";
                std::getline(std::cin, title);

                std::cout << "Enter author name: ";
                std::getline(std::cin, author);

                librarySystem.addBook(title, author);
                break;
            }
            case '2': {
                int bookIndex;
                std::cout << "Enter book index to borrow: ";
                std::cin >> bookIndex;

                librarySystem.borrowBook(bookIndex - 1); // Subtract 1 to convert to zero-based indexing
                break;
            }
            case '3': {
                int bookIndex;
                std::cout << "Enter book index to return: ";
                std::cin >> bookIndex;

                librarySystem.returnBook(bookIndex - 1); // Subtract 1 to convert to zero-based indexing
                break;
            }
            case '4':
                librarySystem.viewAvailableBooks();
                break;
            case '5':
                std::cout << "Exiting the program." << std::endl;
                break;
            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
        }
    } while (choice != '5');

    return 0;
}
