#include <iostream>
#include <vector>
#include <string>
#include <iomanip>

struct Grade {
    std::string subject;
    double score;
};

struct Student {
    std::string name;
    std::vector<Grade> grades;
};

void viewStudentDetails(const Student& student) {
    std::cout << "Student Details:" << std::endl;
    std::cout << "Name: " << student.name << std::endl;

    if (student.grades.empty()) {
        std::cout << "No grades available." << std::endl;
    } else {
        std::cout << "Grades:" << std::endl;
        for (const Grade& grade : student.grades) {
            std::cout << "Subject: " << grade.subject << ", Score: " << std::fixed << std::setprecision(2) << grade.score << std::endl;
        }

        // Calculate and display average grade
        double totalScore = 0;
        for (const Grade& grade : student.grades) {
            totalScore += grade.score;
        }

        double averageScore = totalScore / student.grades.size();
        std::cout << "Average Grade: " << std::fixed << std::setprecision(2) << averageScore << std::endl;
    }
}

int main() {
    std::vector<Student> students;
    char choice;

    do {
        std::cout << "Student Management System" << std::endl;
        std::cout << "1. Add Student" << std::endl;
        std::cout << "2. View Student Details" << std::endl;
        std::cout << "3. Quit" << std::endl;
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case '1': {
                Student student;
                std::cout << "Enter student name: ";
                std::cin.ignore();
                std::getline(std::cin, student.name);

                int numGrades;
                std::cout << "Enter the number of subjects: ";
                std::cin >> numGrades;

                for (int i = 0; i < numGrades; ++i) {
                    Grade grade;
                    std::cout << "Enter subject name: ";
                    std::cin.ignore();
                    std::getline(std::cin, grade.subject);
                    std::cout << "Enter score for " << grade.subject << ": ";
                    std::cin >> grade.score;
                    student.grades.push_back(grade);
                }

                students.push_back(student);
                std::cout << "Student added." << std::endl;
                break;
            }
            case '2': {
                if (students.empty()) {
                    std::cout << "No students available. Add students before viewing details." << std::endl;
                } else {
                    std::string studentName;
                    std::cout << "Enter the name of the student: ";
                    std::cin.ignore();
                    std::getline(std::cin, studentName);

                    auto it = std::find_if(students.begin(), students.end(),
                                           [studentName](const Student& student) {
                                               return student.name == studentName;
                                           });

                    if (it != students.end()) {
                        viewStudentDetails(*it);
                    } else {
                        std::cout << "Student not found." << std::endl;
                    }
                }
                break;
            }
            case '3':
                std::cout << "Exiting the program." << std::endl;
                break;
            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
        }
    } while (choice != '3');

    return 0;
}
